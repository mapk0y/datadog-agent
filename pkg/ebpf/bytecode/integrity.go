// +build ignore

package main

import (
	"crypto/sha256"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// this file generates go code that can be used to verify the contents of a file match when go:generate was called.
func main() {
	if len(os.Args[1:]) < 3 {
		panic("please use 'go run integrity.go <in_file> <out_file> <package>'")
	}

	err := genIntegrity(os.Args[1:])
	if err != nil {
		log.Fatalf("error generating integrity: %s", err)
	}
	fmt.Printf("successfully generated %s\n", os.Args[2])
}

func genIntegrity(args []string) error {
	inputFile, outputFile := args[0], args[1]
	pkg := args[2]

	hash, err := hashFile(inputFile)
	if err != nil {
		return err
	}

	f, err := os.Create(outputFile)
	if err != nil {
		return err
	}
	defer f.Close()

	base := filepath.Base(inputFile)
	name := strings.Trim(strings.Title(strings.TrimSuffix(base, filepath.Ext(base))), "-_.")
	if err := assetTemplate.Execute(f, struct {
		Package   string
		AssetName string
		Filename  string
		Hash      string
	}{pkg, name, base, hash}); err != nil {
		return err
	}

	return nil
}

func hashFile(path string) (string, error) {
	f, err := os.Open(path)
	if err != nil {
		return "", fmt.Errorf("unable to read input file: %w", err)
	}
	defer f.Close()
	h := sha256.New()
	if _, err := io.Copy(h, f); err != nil {
		return "", fmt.Errorf("error hashing input file: %w", err)
	}
	return fmt.Sprintf("%x", h.Sum(nil)), nil
}

var assetTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package {{ .Package }}

import (
	"github.com/DataDog/datadog-agent/pkg/ebpf/bytecode"
)

var {{ .AssetName }} = bytecode.NewRuntimeAsset("{{ .Filename }}", "{{ .Hash }}")
`))
